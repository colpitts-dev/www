# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Person {
  id: ID!
  name: String
  email: String
  password: PasswordState
  isAdmin: Boolean
  memberships(where: MembershipWhereInput! = {}, orderBy: [MembershipOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MembershipWhereUniqueInput): [Membership!]
  membershipsCount(where: MembershipWhereInput! = {}): Int
  profile: Profile
}

type PasswordState {
  isSet: Boolean!
}

input PersonWhereUniqueInput {
  id: ID
  email: String
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
  isAdmin: BooleanFilter
  memberships: MembershipManyRelationFilter
  profile: ProfileWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input MembershipManyRelationFilter {
  every: MembershipWhereInput
  some: MembershipWhereInput
  none: MembershipWhereInput
}

input PersonOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input PersonUpdateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  memberships: MembershipRelateToManyForUpdateInput
  profile: ProfileRelateToOneForUpdateInput
}

input MembershipRelateToManyForUpdateInput {
  disconnect: [MembershipWhereUniqueInput!]
  set: [MembershipWhereUniqueInput!]
  create: [MembershipCreateInput!]
  connect: [MembershipWhereUniqueInput!]
}

input ProfileRelateToOneForUpdateInput {
  create: ProfileCreateInput
  connect: ProfileWhereUniqueInput
  disconnect: Boolean
}

input PersonUpdateArgs {
  where: PersonWhereUniqueInput!
  data: PersonUpdateInput!
}

input PersonCreateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  memberships: MembershipRelateToManyForCreateInput
  profile: ProfileRelateToOneForCreateInput
}

input MembershipRelateToManyForCreateInput {
  create: [MembershipCreateInput!]
  connect: [MembershipWhereUniqueInput!]
}

input ProfileRelateToOneForCreateInput {
  create: ProfileCreateInput
  connect: ProfileWhereUniqueInput
}

type Profile {
  id: ID!
  owner: Person
  nickname: String
  bio: String
  avatar: String
}

input ProfileWhereUniqueInput {
  id: ID
  nickname: String
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  id: IDFilter
  owner: PersonWhereInput
  nickname: StringFilter
  bio: StringFilter
  avatar: StringFilter
}

input ProfileOrderByInput {
  id: OrderDirection
  nickname: OrderDirection
  bio: OrderDirection
  avatar: OrderDirection
}

input ProfileUpdateInput {
  owner: PersonRelateToOneForUpdateInput
  nickname: String
  bio: String
  avatar: String
}

input PersonRelateToOneForUpdateInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
  disconnect: Boolean
}

input ProfileUpdateArgs {
  where: ProfileWhereUniqueInput!
  data: ProfileUpdateInput!
}

input ProfileCreateInput {
  owner: PersonRelateToOneForCreateInput
  nickname: String
  bio: String
  avatar: String
}

input PersonRelateToOneForCreateInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
}

type Membership {
  id: ID!
  owner: Person
  courses(where: CourseWhereInput! = {}, orderBy: [CourseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CourseWhereUniqueInput): [Course!]
  coursesCount(where: CourseWhereInput! = {}): Int
  learnerProfile: Profile
}

input MembershipWhereUniqueInput {
  id: ID
}

input MembershipWhereInput {
  AND: [MembershipWhereInput!]
  OR: [MembershipWhereInput!]
  NOT: [MembershipWhereInput!]
  id: IDFilter
  owner: PersonWhereInput
  courses: CourseManyRelationFilter
  learnerProfile: ProfileWhereInput
}

input CourseManyRelationFilter {
  every: CourseWhereInput
  some: CourseWhereInput
  none: CourseWhereInput
}

input MembershipOrderByInput {
  id: OrderDirection
}

input MembershipUpdateInput {
  owner: PersonRelateToOneForUpdateInput
  courses: CourseRelateToManyForUpdateInput
  learnerProfile: ProfileRelateToOneForUpdateInput
}

input CourseRelateToManyForUpdateInput {
  disconnect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

input MembershipUpdateArgs {
  where: MembershipWhereUniqueInput!
  data: MembershipUpdateInput!
}

input MembershipCreateInput {
  owner: PersonRelateToOneForCreateInput
  courses: CourseRelateToManyForCreateInput
  learnerProfile: ProfileRelateToOneForCreateInput
}

input CourseRelateToManyForCreateInput {
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

type Course {
  id: ID!
  title: String
  description: String
  slug: String
  status: CourseStatusType
  memberships(where: MembershipWhereInput! = {}, orderBy: [MembershipOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MembershipWhereUniqueInput): [Membership!]
  membershipsCount(where: MembershipWhereInput! = {}): Int
  modules(where: ModuleWhereInput! = {}, orderBy: [ModuleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ModuleWhereUniqueInput): [Module!]
  modulesCount(where: ModuleWhereInput! = {}): Int
}

enum CourseStatusType {
  DRAFT
  PUBLIC
  PRIVATE
}

input CourseWhereUniqueInput {
  id: ID
  slug: String
}

input CourseWhereInput {
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  slug: StringFilter
  status: CourseStatusTypeNullableFilter
  memberships: MembershipManyRelationFilter
  modules: ModuleManyRelationFilter
}

input CourseStatusTypeNullableFilter {
  equals: CourseStatusType
  in: [CourseStatusType!]
  notIn: [CourseStatusType!]
  not: CourseStatusTypeNullableFilter
}

input ModuleManyRelationFilter {
  every: ModuleWhereInput
  some: ModuleWhereInput
  none: ModuleWhereInput
}

input CourseOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  slug: OrderDirection
  status: OrderDirection
}

input CourseUpdateInput {
  title: String
  description: String
  slug: String
  status: CourseStatusType
  memberships: MembershipRelateToManyForUpdateInput
  modules: ModuleRelateToManyForUpdateInput
}

input ModuleRelateToManyForUpdateInput {
  disconnect: [ModuleWhereUniqueInput!]
  set: [ModuleWhereUniqueInput!]
  create: [ModuleCreateInput!]
  connect: [ModuleWhereUniqueInput!]
}

input CourseUpdateArgs {
  where: CourseWhereUniqueInput!
  data: CourseUpdateInput!
}

input CourseCreateInput {
  title: String
  description: String
  slug: String
  status: CourseStatusType
  memberships: MembershipRelateToManyForCreateInput
  modules: ModuleRelateToManyForCreateInput
}

input ModuleRelateToManyForCreateInput {
  create: [ModuleCreateInput!]
  connect: [ModuleWhereUniqueInput!]
}

type Module {
  id: ID!
  title: String
  description: String
  course: Course
  lessons(where: LessonWhereInput! = {}, orderBy: [LessonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LessonWhereUniqueInput): [Lesson!]
  lessonsCount(where: LessonWhereInput! = {}): Int
}

input ModuleWhereUniqueInput {
  id: ID
}

input ModuleWhereInput {
  AND: [ModuleWhereInput!]
  OR: [ModuleWhereInput!]
  NOT: [ModuleWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  course: CourseWhereInput
  lessons: LessonManyRelationFilter
}

input LessonManyRelationFilter {
  every: LessonWhereInput
  some: LessonWhereInput
  none: LessonWhereInput
}

input ModuleOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
}

input ModuleUpdateInput {
  title: String
  description: String
  course: CourseRelateToOneForUpdateInput
  lessons: LessonRelateToManyForUpdateInput
}

input CourseRelateToOneForUpdateInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
  disconnect: Boolean
}

input LessonRelateToManyForUpdateInput {
  disconnect: [LessonWhereUniqueInput!]
  set: [LessonWhereUniqueInput!]
  create: [LessonCreateInput!]
  connect: [LessonWhereUniqueInput!]
}

input ModuleUpdateArgs {
  where: ModuleWhereUniqueInput!
  data: ModuleUpdateInput!
}

input ModuleCreateInput {
  title: String
  description: String
  course: CourseRelateToOneForCreateInput
  lessons: LessonRelateToManyForCreateInput
}

input CourseRelateToOneForCreateInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
}

input LessonRelateToManyForCreateInput {
  create: [LessonCreateInput!]
  connect: [LessonWhereUniqueInput!]
}

type Lesson {
  id: ID!
  title: String
  description: String
  module: Module
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  status: LessonStatusType
}

enum LessonStatusType {
  PUBLIC
  PRIVATE
}

input LessonWhereUniqueInput {
  id: ID
}

input LessonWhereInput {
  AND: [LessonWhereInput!]
  OR: [LessonWhereInput!]
  NOT: [LessonWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  module: ModuleWhereInput
  topics: TopicManyRelationFilter
  status: LessonStatusTypeNullableFilter
}

input TopicManyRelationFilter {
  every: TopicWhereInput
  some: TopicWhereInput
  none: TopicWhereInput
}

input LessonStatusTypeNullableFilter {
  equals: LessonStatusType
  in: [LessonStatusType!]
  notIn: [LessonStatusType!]
  not: LessonStatusTypeNullableFilter
}

input LessonOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  status: OrderDirection
}

input LessonUpdateInput {
  title: String
  description: String
  module: ModuleRelateToOneForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  status: LessonStatusType
}

input ModuleRelateToOneForUpdateInput {
  create: ModuleCreateInput
  connect: ModuleWhereUniqueInput
  disconnect: Boolean
}

input TopicRelateToManyForUpdateInput {
  disconnect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  create: [TopicCreateInput!]
  connect: [TopicWhereUniqueInput!]
}

input LessonUpdateArgs {
  where: LessonWhereUniqueInput!
  data: LessonUpdateInput!
}

input LessonCreateInput {
  title: String
  description: String
  module: ModuleRelateToOneForCreateInput
  topics: TopicRelateToManyForCreateInput
  status: LessonStatusType
}

input ModuleRelateToOneForCreateInput {
  create: ModuleCreateInput
  connect: ModuleWhereUniqueInput
}

input TopicRelateToManyForCreateInput {
  create: [TopicCreateInput!]
  connect: [TopicWhereUniqueInput!]
}

type Topic {
  id: ID!
  title: String
  description: String
  lesson: Lesson
}

input TopicWhereUniqueInput {
  id: ID
}

input TopicWhereInput {
  AND: [TopicWhereInput!]
  OR: [TopicWhereInput!]
  NOT: [TopicWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  lesson: LessonWhereInput
}

input TopicOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
}

input TopicUpdateInput {
  title: String
  description: String
  lesson: LessonRelateToOneForUpdateInput
}

input LessonRelateToOneForUpdateInput {
  create: LessonCreateInput
  connect: LessonWhereUniqueInput
  disconnect: Boolean
}

input TopicUpdateArgs {
  where: TopicWhereUniqueInput!
  data: TopicUpdateInput!
}

input TopicCreateInput {
  title: String
  description: String
  lesson: LessonRelateToOneForCreateInput
}

input LessonRelateToOneForCreateInput {
  create: LessonCreateInput
  connect: LessonWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createPerson(data: PersonCreateInput!): Person
  createPeople(data: [PersonCreateInput!]!): [Person]
  updatePerson(where: PersonWhereUniqueInput!, data: PersonUpdateInput!): Person
  updatePeople(data: [PersonUpdateArgs!]!): [Person]
  deletePerson(where: PersonWhereUniqueInput!): Person
  deletePeople(where: [PersonWhereUniqueInput!]!): [Person]
  createProfile(data: ProfileCreateInput!): Profile
  createProfiles(data: [ProfileCreateInput!]!): [Profile]
  updateProfile(where: ProfileWhereUniqueInput!, data: ProfileUpdateInput!): Profile
  updateProfiles(data: [ProfileUpdateArgs!]!): [Profile]
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  deleteProfiles(where: [ProfileWhereUniqueInput!]!): [Profile]
  createMembership(data: MembershipCreateInput!): Membership
  createMemberships(data: [MembershipCreateInput!]!): [Membership]
  updateMembership(where: MembershipWhereUniqueInput!, data: MembershipUpdateInput!): Membership
  updateMemberships(data: [MembershipUpdateArgs!]!): [Membership]
  deleteMembership(where: MembershipWhereUniqueInput!): Membership
  deleteMemberships(where: [MembershipWhereUniqueInput!]!): [Membership]
  createCourse(data: CourseCreateInput!): Course
  createCourses(data: [CourseCreateInput!]!): [Course]
  updateCourse(where: CourseWhereUniqueInput!, data: CourseUpdateInput!): Course
  updateCourses(data: [CourseUpdateArgs!]!): [Course]
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteCourses(where: [CourseWhereUniqueInput!]!): [Course]
  createModule(data: ModuleCreateInput!): Module
  createModules(data: [ModuleCreateInput!]!): [Module]
  updateModule(where: ModuleWhereUniqueInput!, data: ModuleUpdateInput!): Module
  updateModules(data: [ModuleUpdateArgs!]!): [Module]
  deleteModule(where: ModuleWhereUniqueInput!): Module
  deleteModules(where: [ModuleWhereUniqueInput!]!): [Module]
  createLesson(data: LessonCreateInput!): Lesson
  createLessons(data: [LessonCreateInput!]!): [Lesson]
  updateLesson(where: LessonWhereUniqueInput!, data: LessonUpdateInput!): Lesson
  updateLessons(data: [LessonUpdateArgs!]!): [Lesson]
  deleteLesson(where: LessonWhereUniqueInput!): Lesson
  deleteLessons(where: [LessonWhereUniqueInput!]!): [Lesson]
  createTopic(data: TopicCreateInput!): Topic
  createTopics(data: [TopicCreateInput!]!): [Topic]
  updateTopic(where: TopicWhereUniqueInput!, data: TopicUpdateInput!): Topic
  updateTopics(data: [TopicUpdateArgs!]!): [Topic]
  deleteTopic(where: TopicWhereUniqueInput!): Topic
  deleteTopics(where: [TopicWhereUniqueInput!]!): [Topic]
  endSession: Boolean!
  authenticatePersonWithPassword(email: String!, password: String!): PersonAuthenticationWithPasswordResult
  createInitialPerson(data: CreateInitialPersonInput!): PersonAuthenticationWithPasswordSuccess!
}

union PersonAuthenticationWithPasswordResult = PersonAuthenticationWithPasswordSuccess | PersonAuthenticationWithPasswordFailure

type PersonAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: Person!
}

type PersonAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialPersonInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
}

type Query {
  person(where: PersonWhereUniqueInput!): Person
  people(where: PersonWhereInput! = {}, orderBy: [PersonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonWhereUniqueInput): [Person!]
  peopleCount(where: PersonWhereInput! = {}): Int
  profile(where: ProfileWhereUniqueInput!): Profile
  profiles(where: ProfileWhereInput! = {}, orderBy: [ProfileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProfileWhereUniqueInput): [Profile!]
  profilesCount(where: ProfileWhereInput! = {}): Int
  membership(where: MembershipWhereUniqueInput!): Membership
  memberships(where: MembershipWhereInput! = {}, orderBy: [MembershipOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MembershipWhereUniqueInput): [Membership!]
  membershipsCount(where: MembershipWhereInput! = {}): Int
  course(where: CourseWhereUniqueInput!): Course
  courses(where: CourseWhereInput! = {}, orderBy: [CourseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CourseWhereUniqueInput): [Course!]
  coursesCount(where: CourseWhereInput! = {}): Int
  module(where: ModuleWhereUniqueInput!): Module
  modules(where: ModuleWhereInput! = {}, orderBy: [ModuleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ModuleWhereUniqueInput): [Module!]
  modulesCount(where: ModuleWhereInput! = {}): Int
  lesson(where: LessonWhereUniqueInput!): Lesson
  lessons(where: LessonWhereInput! = {}, orderBy: [LessonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LessonWhereUniqueInput): [Lesson!]
  lessonsCount(where: LessonWhereInput! = {}): Int
  topic(where: TopicWhereUniqueInput!): Topic
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = Person

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
